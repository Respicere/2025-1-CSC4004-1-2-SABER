{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\82102\\\\Downloads\\\\2025-1-CSC4004-1-2-SABER-main\\\\2025-1-CSC4004-1-2-SABER-main\\\\frontend\\\\src\\\\contexts\\\\TimerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimerContext = /*#__PURE__*/createContext(null);\nexport const TimerProvider = ({\n  children\n}) => {\n  _s();\n  // 초기 시간: 10분 = 600초\n  const initialTime = 600;\n  const [timeLeft, setTimeLeft] = useState(() => {\n    return initialTime;\n  });\n  const [isTimerRunning, setIsTimerRunning] = useState(true); // 타이머 시작 상태\n\n  useEffect(() => {\n    let timerId;\n    if (isTimerRunning && timeLeft > 0) {\n      timerId = setInterval(() => {\n        setTimeLeft(prevTime => {\n          const newTime = prevTime - 1;\n          localStorage.setItem('sellerTimerLeft', newTime.toString()); // 로컬 스토리지에 시간 저장\n          return newTime;\n        });\n      }, 1000);\n    } else if (timeLeft <= 0) {\n      setIsTimerRunning(false); // 시간이 0이 되면 타이머 중지\n      localStorage.removeItem('sellerTimerLeft'); // 타이머 종료 시 로컬 스토리지에서 삭제\n    }\n\n    // 컴포넌트 언마운트 또는 isTimerRunning, timeLeft 변경 시 타이머 정리\n    return () => clearInterval(timerId);\n  }, [timeLeft, isTimerRunning]);\n\n  // 타이머를 재설정하는 함수\n  const resetTimer = () => {\n    setTimeLeft(initialTime);\n    setIsTimerRunning(true);\n    localStorage.setItem('sellerTimerLeft', initialTime.toString());\n  };\n\n  // 타이머를 중지하는 함수\n  const stopTimer = () => {\n    setIsTimerRunning(false);\n  };\n\n  // 시간을 MM:SS 형식으로 포맷팅하는 유틸리티 함수\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedMinutes = String(minutes).padStart(2, '0');\n    const formattedSeconds = String(remainingSeconds).padStart(2, '0');\n    return `${formattedMinutes}:${formattedSeconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(TimerContext.Provider, {\n    value: {\n      timeLeft,\n      isTimerRunning,\n      resetTimer,\n      stopTimer,\n      formatTime\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n// Context를 편리하게 사용할 수 있도록 훅 생성\n_s(TimerProvider, \"KIQBXXKIiPd0sjlP7Mj/aNBQjKA=\");\n_c = TimerProvider;\nexport const useTimer = () => {\n  _s2();\n  const context = useContext(TimerContext);\n  if (!context) {\n    throw new Error('useTimer must be used within a TimerProvider');\n  }\n  return context;\n};\n_s2(useTimer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TimerProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","TimerContext","TimerProvider","children","_s","initialTime","timeLeft","setTimeLeft","isTimerRunning","setIsTimerRunning","timerId","setInterval","prevTime","newTime","localStorage","setItem","toString","removeItem","clearInterval","resetTimer","stopTimer","formatTime","seconds","minutes","Math","floor","remainingSeconds","formattedMinutes","String","padStart","formattedSeconds","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTimer","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/82102/Downloads/2025-1-CSC4004-1-2-SABER-main/2025-1-CSC4004-1-2-SABER-main/frontend/src/contexts/TimerContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\n\nconst TimerContext = createContext(null);\n\nexport const TimerProvider = ({ children }) => {\n  // 초기 시간: 10분 = 600초\n  const initialTime = 600;\n  const [timeLeft, setTimeLeft] = useState(() => {\n    return initialTime;\n  });\n  const [isTimerRunning, setIsTimerRunning] = useState(true); // 타이머 시작 상태\n\n  useEffect(() => {\n    let timerId;\n\n    if (isTimerRunning && timeLeft > 0) {\n      timerId = setInterval(() => {\n        setTimeLeft((prevTime) => {\n          const newTime = prevTime - 1;\n          localStorage.setItem('sellerTimerLeft', newTime.toString()); // 로컬 스토리지에 시간 저장\n          return newTime;\n        });\n      }, 1000);\n    } else if (timeLeft <= 0) {\n      setIsTimerRunning(false); // 시간이 0이 되면 타이머 중지\n      localStorage.removeItem('sellerTimerLeft'); // 타이머 종료 시 로컬 스토리지에서 삭제\n    }\n\n    // 컴포넌트 언마운트 또는 isTimerRunning, timeLeft 변경 시 타이머 정리\n    return () => clearInterval(timerId);\n  }, [timeLeft, isTimerRunning]);\n\n  // 타이머를 재설정하는 함수\n  const resetTimer = () => {\n    setTimeLeft(initialTime);\n    setIsTimerRunning(true);\n    localStorage.setItem('sellerTimerLeft', initialTime.toString());\n  };\n\n  // 타이머를 중지하는 함수\n  const stopTimer = () => {\n    setIsTimerRunning(false);\n  };\n\n  // 시간을 MM:SS 형식으로 포맷팅하는 유틸리티 함수\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedMinutes = String(minutes).padStart(2, '0');\n    const formattedSeconds = String(remainingSeconds).padStart(2, '0');\n    return `${formattedMinutes}:${formattedSeconds}`;\n  };\n\n  return (\n    <TimerContext.Provider value={{ timeLeft, isTimerRunning, resetTimer, stopTimer, formatTime }}>\n      {children}\n    </TimerContext.Provider>\n  );\n};\n\n// Context를 편리하게 사용할 수 있도록 훅 생성\nexport const useTimer = () => {\n  const context = useContext(TimerContext);\n  if (!context) {\n    throw new Error('useTimer must be used within a TimerProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}