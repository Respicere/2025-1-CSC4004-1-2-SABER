{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  withCredentials: true // 쿠키 자동 전송 설정 (토큰 인증 위해 필수)\n});\n\n// 프론트엔드 URL을 상수로 정의\nconst FRONTEND_URL = 'http://localhost:3000';\n\n// 카테고리 목록 조회 (GET /api/categories)\nexport const fetchCategories = () => api.get('/categories');\n\n// 전체 인증 옵션 조회 (GET /api/defaultVerifications)\nexport const fetchAllDefaultVerifications = () => api.get('/defaultVerifications');\n\n// 추천 인증 옵션 조회 (GET /api/categories/{categoryId}/recommended-verifications)\nexport const fetchRecommendedVerifications = categoryId => api.get(`/categories/${categoryId}/recommended-verifications`);\n\n// 카테고리 선택 (POST /api/settings/category)\nexport const setCategory = categoryId => api.post('/settings/category', {\n  categoryId\n});\n\n// 상세 인증 옵션 설정 (POST /api/link/{verificationId}/settings)\nexport const setVerificationOptions = (verificationId, data) => api.post(`/link/${verificationId}/settings`, data);\n\n// 인증 링크 생성 (POST /api/link/{verificationId}/link)\nexport const createLink = async verificationId => {\n  try {\n    const response = await api.post(`/link/${verificationId}/link`);\n    console.log(\"서버 응답 전체:\", response.data); // 서버 응답 전체를 로그\n\n    // 서버 응답에서 link와 status를 추출\n    // response.data.link가 \"http://localhost:8080/saber?token=...\" 형태임을 전제로 합니다.\n    const serverProvidedLink = response.data.link;\n    const status = response.data.status;\n    console.log(\"서버가 제공한 링크:\", serverProvidedLink); // 서버가 제공한 링크 로그\n\n    // 서버가 제공한 링크에서 token만 파싱\n    const url = new URL(serverProvidedLink);\n    const token = url.searchParams.get('token'); // 'token' 쿼리 파라미터 값 추출\n\n    console.log(\"추출된 토큰:\", token); // 추출된 토큰 값 로그\n\n    if (!token) {\n      // 토큰이 undefined라면 에러를 발생시킵니다.\n      console.error('서버 응답 링크에서 유효한 토큰을 찾을 수 없습니다. 원본 링크:', serverProvidedLink);\n      throw new Error('인증 토큰을 찾을 수 없습니다.');\n    }\n\n    // 프론트엔드 URL을 사용하여 새로운 링크를 구성\n    const fullLink = `${FRONTEND_URL}/seller/start?token=${token}`;\n    console.log(\"최종 생성된 프론트엔드 링크:\", fullLink); // 최종 링크 로그\n\n    return {\n      data: {\n        link: fullLink,\n        // 수정된 링크 반환\n        status: status // 서버로부터 받은 상태 반환\n      }\n    };\n  } catch (error) {\n    console.error('인증 링크 생성 실패:', error.response ? error.response.data : error.message);\n    throw error; // 에러를 다시 던져서 호출하는 곳에서 처리할 수 있도록 함\n  }\n};\n\n// 인증 상태 조회 (GET /api/link/{verificationId})\nexport const getVerificationStatus = verificationId => api.get(`/link/${verificationId}`);","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","FRONTEND_URL","fetchCategories","get","fetchAllDefaultVerifications","fetchRecommendedVerifications","categoryId","setCategory","post","setVerificationOptions","verificationId","data","createLink","response","console","log","serverProvidedLink","link","status","url","URL","token","searchParams","error","Error","fullLink","message","getVerificationStatus"],"sources":["C:/Users/82102/Downloads/2025-1-CSC4004-1-2-SABER-main/2025-1-CSC4004-1-2-SABER-main/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'http://localhost:8080/api',\n    withCredentials: true, // 쿠키 자동 전송 설정 (토큰 인증 위해 필수)\n});\n\n// 프론트엔드 URL을 상수로 정의\nconst FRONTEND_URL = 'http://localhost:3000'; \n\n// 카테고리 목록 조회 (GET /api/categories)\nexport const fetchCategories = () => api.get('/categories');\n\n// 전체 인증 옵션 조회 (GET /api/defaultVerifications)\nexport const fetchAllDefaultVerifications = () => api.get('/defaultVerifications');\n\n// 추천 인증 옵션 조회 (GET /api/categories/{categoryId}/recommended-verifications)\nexport const fetchRecommendedVerifications = (categoryId) => api.get(`/categories/${categoryId}/recommended-verifications`);\n\n// 카테고리 선택 (POST /api/settings/category)\nexport const setCategory = (categoryId) =>\n    api.post('/settings/category', { categoryId });\n\n// 상세 인증 옵션 설정 (POST /api/link/{verificationId}/settings)\nexport const setVerificationOptions = (verificationId, data) =>\n    api.post(`/link/${verificationId}/settings`, data);\n\n// 인증 링크 생성 (POST /api/link/{verificationId}/link)\nexport const createLink = async (verificationId) => {\n    try {\n        const response = await api.post(`/link/${verificationId}/link`);\n        \n        console.log(\"서버 응답 전체:\", response.data); // 서버 응답 전체를 로그\n        \n        // 서버 응답에서 link와 status를 추출\n        // response.data.link가 \"http://localhost:8080/saber?token=...\" 형태임을 전제로 합니다.\n        const serverProvidedLink = response.data.link;\n        const status = response.data.status; \n\n        console.log(\"서버가 제공한 링크:\", serverProvidedLink); // 서버가 제공한 링크 로그\n\n        // 서버가 제공한 링크에서 token만 파싱\n        const url = new URL(serverProvidedLink);\n        const token = url.searchParams.get('token'); // 'token' 쿼리 파라미터 값 추출\n\n        console.log(\"추출된 토큰:\", token); // 추출된 토큰 값 로그\n\n        if (!token) {\n            // 토큰이 undefined라면 에러를 발생시킵니다.\n            console.error('서버 응답 링크에서 유효한 토큰을 찾을 수 없습니다. 원본 링크:', serverProvidedLink);\n            throw new Error('인증 토큰을 찾을 수 없습니다.');\n        }\n\n        // 프론트엔드 URL을 사용하여 새로운 링크를 구성\n        const fullLink = `${FRONTEND_URL}/seller/start?token=${token}`;\n        \n        console.log(\"최종 생성된 프론트엔드 링크:\", fullLink); // 최종 링크 로그\n\n        return {\n            data: {\n                link: fullLink, // 수정된 링크 반환\n                status: status, // 서버로부터 받은 상태 반환\n            }\n        };\n    } catch (error) {\n        console.error('인증 링크 생성 실패:', error.response ? error.response.data : error.message);\n        throw error; // 에러를 다시 던져서 호출하는 곳에서 처리할 수 있도록 함\n    }\n};\n\n// 인증 상태 조회 (GET /api/link/{verificationId})\nexport const getVerificationStatus = (verificationId) =>\n    api.get(`/link/${verificationId}`);\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;;AAEF;AACA,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAML,GAAG,CAACM,GAAG,CAAC,aAAa,CAAC;;AAE3D;AACA,OAAO,MAAMC,4BAA4B,GAAGA,CAAA,KAAMP,GAAG,CAACM,GAAG,CAAC,uBAAuB,CAAC;;AAElF;AACA,OAAO,MAAME,6BAA6B,GAAIC,UAAU,IAAKT,GAAG,CAACM,GAAG,CAAC,eAAeG,UAAU,4BAA4B,CAAC;;AAE3H;AACA,OAAO,MAAMC,WAAW,GAAID,UAAU,IAClCT,GAAG,CAACW,IAAI,CAAC,oBAAoB,EAAE;EAAEF;AAAW,CAAC,CAAC;;AAElD;AACA,OAAO,MAAMG,sBAAsB,GAAGA,CAACC,cAAc,EAAEC,IAAI,KACvDd,GAAG,CAACW,IAAI,CAAC,SAASE,cAAc,WAAW,EAAEC,IAAI,CAAC;;AAEtD;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOF,cAAc,IAAK;EAChD,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMhB,GAAG,CAACW,IAAI,CAAC,SAASE,cAAc,OAAO,CAAC;IAE/DI,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,QAAQ,CAACF,IAAI,CAAC,CAAC,CAAC;;IAEzC;IACA;IACA,MAAMK,kBAAkB,GAAGH,QAAQ,CAACF,IAAI,CAACM,IAAI;IAC7C,MAAMC,MAAM,GAAGL,QAAQ,CAACF,IAAI,CAACO,MAAM;IAEnCJ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,kBAAkB,CAAC,CAAC,CAAC;;IAEhD;IACA,MAAMG,GAAG,GAAG,IAAIC,GAAG,CAACJ,kBAAkB,CAAC;IACvC,MAAMK,KAAK,GAAGF,GAAG,CAACG,YAAY,CAACnB,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;;IAE7CW,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEM,KAAK,CAAC,CAAC,CAAC;;IAE/B,IAAI,CAACA,KAAK,EAAE;MACR;MACAP,OAAO,CAACS,KAAK,CAAC,sCAAsC,EAAEP,kBAAkB,CAAC;MACzE,MAAM,IAAIQ,KAAK,CAAC,mBAAmB,CAAC;IACxC;;IAEA;IACA,MAAMC,QAAQ,GAAG,GAAGxB,YAAY,uBAAuBoB,KAAK,EAAE;IAE9DP,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEU,QAAQ,CAAC,CAAC,CAAC;;IAE3C,OAAO;MACHd,IAAI,EAAE;QACFM,IAAI,EAAEQ,QAAQ;QAAE;QAChBP,MAAM,EAAEA,MAAM,CAAE;MACpB;IACJ,CAAC;EACL,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZT,OAAO,CAACS,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACV,QAAQ,GAAGU,KAAK,CAACV,QAAQ,CAACF,IAAI,GAAGY,KAAK,CAACG,OAAO,CAAC;IACnF,MAAMH,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMI,qBAAqB,GAAIjB,cAAc,IAChDb,GAAG,CAACM,GAAG,CAAC,SAASO,cAAc,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}